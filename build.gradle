plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

group 'uk.tvidal'
version '0.2-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'

sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = sourceCompatibility

mainClassName = 'uk.tvidal.kafka.explorer.KafkaExplorer'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = project.targetCompatibility
    }
}

compileKotlin {
    kotlinOptions {
        allWarningsAsErrors = true
    }
}

test {
    useJUnitPlatform()
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls' ]
}

dependencies {
    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // Kafka
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: kafka_version

    // Java FX
    implementation group: 'uk.tvidal', name: 'tvidal-javafx', version: tvidal_version
    api group: 'no.tornado', name: 'tornadofx', version: '1.7.20'

    // Logging
    implementation group: 'uk.tvidal', name: 'tvidal-logging', version: tvidal_version
    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.2'

    // Tests
    testImplementation group: 'io.mockk', name: 'mockk', version: mockk_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_version
}

jar {
    manifest {
        attributes(
                'Implementation-Vendor': project.group,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': mainClassName
        )
    }

    from configurations.runtimeClasspath.collect {
        it.isDirectory() ? it : zipTree(it)
    }
}
